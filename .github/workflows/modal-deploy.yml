name: Modal Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main, master, develop ]
    paths:
      - "modal/**"
      - "modal_app.py"
      - ".github/workflows/modal-deploy.yml"

concurrency:
  group: modal-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  MODAL_ENTRYPOINT: "modal/modal_app.py" # change if your entry file is elsewhere

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Determine dependency files
        id: deps
        run: |
          FILES=$(ls requirements*.txt 2>/dev/null || true)
          if [ -f pyproject.toml ]; then FILES="$FILES pyproject.toml"; fi
          if [ -f poetry.lock ]; then FILES="$FILES poetry.lock"; fi
          echo "files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Cache pip
        if: steps.deps.outputs.files != ''
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles(steps.deps.outputs.files) }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if ls requirements*.txt >/dev/null 2>&1; then
            pip install -r requirements.txt || true
          elif [ -f pyproject.toml ]; then
            python -m pip install build || true
          fi
          pip install "modal>=0.56" Pillow==10.3.0 moviepy==1.0.3 supabase==2.4.3
          python -c "import modal; print('modal version:', getattr(modal,'__version__','?'))"
          python -m modal --help >/dev/null

      # --- Modal auth (fixed: no whoami, dedicated profile) ---
      - name: Configure Modal token (non-interactive)
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          if [ -z "$MODAL_TOKEN_ID" ] || [ -z "$MODAL_TOKEN_SECRET" ]; then
            echo "::error::Missing MODAL_TOKEN_ID or MODAL_TOKEN_SECRET in repo secrets."
            exit 1
          fi
          python -m modal token set \
            --token-id "$MODAL_TOKEN_ID" \
            --token-secret "$MODAL_TOKEN_SECRET" \
            --profile ci
          python -m modal token get --profile ci >/dev/null 2>&1 || true
          echo "MODAL_PROFILE=ci" >> $GITHUB_ENV
          unset MODAL_TOKEN_ID MODAL_TOKEN_SECRET

      - name: Validate entrypoint
        run: |
          if [ ! -f "$MODAL_ENTRYPOINT" ]; then
            echo "::error file=$MODAL_ENTRYPOINT::Modal entrypoint not found"
            exit 1
          fi

      # --- Smoke test (fast) before deploy ---
      # Uses your @app.local_entrypoint (present in your file) to catch import/build issues quickly.
      - name: Smoke test (modal run)
        env:
          MODAL_PROFILE: ${{ env.MODAL_PROFILE }}
        run: |
          # This will build the image and run the local entrypoint in Modal's env.
          python -m modal run "$MODAL_ENTRYPOINT" --profile "$MODAL_PROFILE"

      # --- Deploy (with retry) ---
      - name: Deploy to Modal
        env:
          MODAL_PROFILE: ${{ env.MODAL_PROFILE }}
          MODAL_ENTRYPOINT: ${{ env.MODAL_ENTRYPOINT }}
        run: |
          n=0
          until [ $n -ge 3 ]; do
            python -m modal deploy "$MODAL_ENTRYPOINT" --profile "$MODAL_PROFILE" && break
            n=$((n+1))
            echo "Deploy failed (attempt $n). Retrying in 10s..."
            sleep 10
          done
          if [ $n -ge 3 ]; then
            echo "::error::Modal deploy failed after 3 attempts."
            exit 1
          fi

      # ================= Alerts on failure (email + SMS) =================
      # Email via Resend (optional). Add secrets to enable:
      #   RESEND_API_KEY, ALERT_EMAIL_FROM, ALERT_EMAIL_TO
      - name: Send failure email (Resend)
        if: failure() && env.RESEND_API_KEY != '' && env.ALERT_EMAIL_FROM != '' && env.ALERT_EMAIL_TO != ''
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          ALERT_EMAIL_FROM: ${{ secrets.ALERT_EMAIL_FROM }}
          ALERT_EMAIL_TO: ${{ secrets.ALERT_EMAIL_TO }}
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          BODY=$(cat <<EOF
          {
            "from": "${ALERT_EMAIL_FROM}",
            "to": ["${ALERT_EMAIL_TO}"],
            "subject": "❌ Modal deploy failed: ${GITHUB_REPOSITORY}@${GITHUB_REF_NAME}",
            "text": "Workflow failed. Commit: ${GITHUB_SHA::7}\nRun: ${RUN_URL}\nBranch: ${GITHUB_REF_NAME}"
          }
          EOF
          )
          curl -s -X POST https://api.resend.com/emails \
            -H "Authorization: Bearer ${RESEND_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "${BODY}"

      # SMS via Twilio (optional). Add secrets to enable:
      #   TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_FROM, ALERT_SMS_TO
      - name: Send failure SMS (Twilio)
        if: failure() && env.TWILIO_ACCOUNT_SID != '' && env.TWILIO_AUTH_TOKEN != '' && env.TWILIO_FROM != '' && env.ALERT_SMS_TO != ''
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
          ALERT_SMS_TO: ${{ secrets.ALERT_SMS_TO }}
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="❌ Modal deploy failed: ${GITHUB_REPOSITORY}@${GITHUB_REF_NAME} (${GITHUB_SHA::7}) ${RUN_URL}"
          curl -s -X POST "https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Messages.json" \
            --data-urlencode "From=${TWILIO_FROM}" \
            --data-urlencode "To=${ALERT_SMS_TO}" \
            --data-urlencode "Body=${MSG}" \
            -u "${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN}"
