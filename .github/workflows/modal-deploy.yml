name: Modal Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main, master, develop ]
    paths:
      - "modal/**"
      - "modal_app.py"
      - ".github/workflows/modal-deploy.yml"

concurrency:
  group: modal-deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  MODAL_ENTRYPOINT: "modal/modal_app.py" # change if your entry file is elsewhere
  MODAL_PROFILE: "prod"                  # single source of truth for profile

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install Modal CLI (runner-only)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-ci.txt ]; then
            pip install -r requirements-ci.txt
          else
            pip install "modal>=1.1,<2"
          fi
          python -m modal --version >/dev/null

      # --- Modal auth (writes to named profile, then verifies) ---
      - name: Configure Modal token
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          if [ -z "$MODAL_TOKEN_ID" ] || [ -z "$MODAL_TOKEN_SECRET" ]; then
            echo "::error::Missing MODAL_TOKEN_ID or MODAL_TOKEN_SECRET in repo secrets."
            exit 1
          fi

          # Write creds into the prod profile
          python -m modal token set \
            --token-id "$MODAL_TOKEN_ID" \
            --token-secret "$MODAL_TOKEN_SECRET" \
            --profile "${MODAL_PROFILE}"

          # Verify we can read them back (does not print secrets)
          python -m modal token get --profile "${MODAL_PROFILE}" >/dev/null 2>&1 || {
            echo "::error::Failed to read back Modal token for profile '${MODAL_PROFILE}'"
            exit 1
          }

          # Make profile visible to subsequent steps
          echo "MODAL_PROFILE=${MODAL_PROFILE}" >> "$GITHUB_ENV"

          # Clear from env
          unset MODAL_TOKEN_ID MODAL_TOKEN_SECRET

      - name: Validate entrypoint exists
        run: |
          if [ ! -f "$MODAL_ENTRYPOINT" ]; then
            echo "::error file=$MODAL_ENTRYPOINT::Modal entrypoint not found"
            exit 1
          fi

      # --- Deploy (with retry) ---
      - name: Deploy to Modal
        env:
          MODAL_PROFILE: ${{ env.MODAL_PROFILE }}
          MODAL_ENTRYPOINT: ${{ env.MODAL_ENTRYPOINT }}
        run: |
          set -e
          echo "Using MODAL_PROFILE=${MODAL_PROFILE}"
          echo "Deploying entrypoint: ${MODAL_ENTRYPOINT}"

          n=0
          until [ $n -ge 3 ]; do
            if python -m modal deploy "${MODAL_ENTRYPOINT}" --profile "${MODAL_PROFILE}"; then
              echo "Deploy succeeded."
              exit 0
            fi
            n=$((n+1))
            echo "Deploy failed (attempt ${n}). Retrying in 10s..."
            sleep 10
          done

          echo "::error::Modal deploy failed after 3 attempts."
          exit 1

      # ================= Alerts on failure (email + SMS) =================
      - name: Send failure email (Resend)
        if: failure() && env.RESEND_API_KEY != '' && env.ALERT_EMAIL_FROM != '' && env.ALERT_EMAIL_TO != ''
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          ALERT_EMAIL_FROM: ${{ secrets.ALERT_EMAIL_FROM }}
          ALERT_EMAIL_TO: ${{ secrets.ALERT_EMAIL_TO }}
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          BODY=$(cat <<EOF
          {
            "from": "${ALERT_EMAIL_FROM}",
            "to": ["${ALERT_EMAIL_TO}"],
            "subject": "❌ Modal deploy failed: ${GITHUB_REPOSITORY}@${GITHUB_REF_NAME}",
            "text": "Workflow failed. Commit: ${GITHUB_SHA::7}\nRun: ${RUN_URL}\nBranch: ${GITHUB_REF_NAME}"
          }
          EOF
          )
          curl -s -X POST https://api.resend.com/emails \
            -H "Authorization: Bearer ${RESEND_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "${BODY}"

      - name: Send failure SMS (Twilio)
        if: failure() && env.TWILIO_ACCOUNT_SID != '' && env.TWILIO_AUTH_TOKEN != '' && env.TWILIO_FROM != '' && env.ALERT_SMS_TO != ''
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
          ALERT_SMS_TO: ${{ secrets.ALERT_SMS_TO }}
        run: |
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MSG="❌ Modal deploy failed: ${GITHUB_REPOSITORY}@${GITHUB_REF_NAME} (${GITHUB_SHA::7}) ${RUN_URL}"
          curl -s -X POST "https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Messages.json" \
            --data-urlencode "From=${TWILIO_FROM}" \
            --data-urlencode "To=${ALERT_SMS_TO}" \
            --data-urlencode "Body=${MSG}" \
            -u "${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN}"
