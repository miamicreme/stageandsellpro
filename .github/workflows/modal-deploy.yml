name: Modal Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main, master, develop ]
    paths:
      - "modal/**"
      - "modal_app.py"
      - ".github/workflows/modal-deploy.yml"

concurrency:
  group: modal-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  MODAL_ENTRYPOINT: "modal/modal_app.py"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python (no cache fallback)
        # Always set up Python first so the job doesn't fail if no dep files exist
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Optional pip cache only if dependency files exist
      - name: Determine dependency files
        id: deps
        run: |
          FILES=$(ls requirements*.txt 2>/dev/null || true)
          if [ -f pyproject.toml ]; then FILES="$FILES pyproject.toml"; fi
          if [ -f poetry.lock ]; then FILES="$FILES poetry.lock"; fi
          echo "files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Cache pip
        if: steps.deps.outputs.files != ''
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles(steps.deps.outputs.files) }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install your project deps if present (optional)
          if ls requirements*.txt >/dev/null 2>&1; then
            pip install -r requirements.txt || true
          elif [ -f pyproject.toml ]; then
            python -m pip install build || true
            # If you're using poetry/pdm, add it here. Otherwise skip.
          fi
          # Ensure Modal CLI + runtime libs
          pip install "modal>=0.56" Pillow==10.3.0 moviepy==1.0.3 supabase==2.4.3
          python -c "import modal; print('modal version:', getattr(modal,'__version__','?'))"
          python -m modal --help > /dev/null

      - name: Configure Modal token
        env:
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          if [ -z "$MODAL_TOKEN_ID" ] || [ -z "$MODAL_TOKEN_SECRET" ]; then
            echo "::error::Missing MODAL_TOKEN_ID or MODAL_TOKEN_SECRET in repo secrets."
            exit 1
          fi
          python -m modal token set --token-id "$MODAL_TOKEN_ID" --token-secret "$MODAL_TOKEN_SECRET"
          python -m modal whoami

      - name: Validate entrypoint
        run: |
          if [ ! -f "$MODAL_ENTRYPOINT" ]; then
            echo "::error file=$MODAL_ENTRYPOINT::Modal entrypoint not found"
            exit 1
          fi

      - name: Deploy to Modal (retry)
        run: |
          n=0
          until [ $n -ge 3 ]; do
            python -m modal deploy "$MODAL_ENTRYPOINT" && break
            n=$((n+1))
            echo "Deploy failed (attempt $n). Retrying in 10s..."
            sleep 10
          done
          if [ $n -ge 3 ]; then
            echo "::error::Modal deploy failed after 3 attempts."
            exit 1
          fi
