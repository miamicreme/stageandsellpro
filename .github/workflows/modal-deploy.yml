name: Modal Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main, master, develop ]
    paths:
      - "modal/**"
      - "modal_app.py"
      - ".github/workflows/modal-deploy.yml"

concurrency:
  group: modal-deploy-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  MODAL_ENTRYPOINT: "modal/modal_app.py"
  MODAL_PROFILE: "prod"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Guard against underscore Modal URLs
        shell: bash
        run: |
          set -euo pipefail
          # Look everywhere EXCEPT .git and .github (to avoid matching this workflow)
          matches=$(grep -RIn --exclude-dir=.git --exclude-dir=.github -E 'keepwarm_set\.modal\.run' . || true)
          if [ -n "$matches" ]; then
            echo "::error::Found invalid underscore hostname(s). Use 'keepwarm-set.modal.run' or alias 'keepwarmset.modal.run':"
            echo "$matches"
            exit 1
          fi
          # Guard route paths too (still excluding .git/.github)
          matches_routes=$(grep -RIn --exclude-dir=.git --exclude-dir=.github -E '(^|[^A-Za-z0-9_])/keepwarm_set(\b|/|\?)' . || true)
          if [ -n "$matches_routes" ]; then
            echo "::error::Found invalid underscore route path(s). Replace with '/keepwarm-set':"
            echo "$matches_routes"
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Modal CLI
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "modal>=1.1,<2"
          python -m modal --version || true

      - name: Configure Modal token
        shell: bash
        env:
          CI_MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          CI_MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
          MODAL_PROFILE: prod
        run: |
          set -euo pipefail
          if [ -z "${CI_MODAL_TOKEN_ID:-}" ] || [ -z "${CI_MODAL_TOKEN_SECRET:-}" ]; then
            echo "::error::Missing MODAL_TOKEN_ID or MODAL_TOKEN_SECRET in repo secrets."
            exit 1
          fi
          python -m modal token set             --token-id "$CI_MODAL_TOKEN_ID"             --token-secret "$CI_MODAL_TOKEN_SECRET"             --profile "$MODAL_PROFILE"
          # Verify ~/.modal.toml has [prod] with token_id + token_secret (no heredoc)
          python -c "import sys, pathlib, tomllib; p=(pathlib.Path.home()/'.modal.toml'); d=tomllib.loads(p.read_text()) if p.exists() else {}; pr=d.get('prod') or {}; sys.exit(0 if (pr.get('token_id') and pr.get('token_secret')) else 2)"             || { echo '::error::Modal token verification failed (missing [prod].token_id/token_secret in ~/.modal.toml)'; exit 1; }
          echo "MODAL_PROFILE=$MODAL_PROFILE" >> "$GITHUB_ENV"
          unset CI_MODAL_TOKEN_ID CI_MODAL_TOKEN_SECRET

      - name: Validate entrypoint exists
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "$MODAL_ENTRYPOINT" ]; then
            echo "::error file=$MODAL_ENTRYPOINT::Modal entrypoint not found"
            exit 1
          fi

      - name: Deploy to Modal
        shell: bash
        env:
          MODAL_PROFILE: ${{ env.MODAL_PROFILE }}
          MODAL_ENTRYPOINT: ${{ env.MODAL_ENTRYPOINT }}
        run: |
          set -euo pipefail
          echo "Using MODAL_PROFILE=${MODAL_PROFILE}"
          echo "Deploying entrypoint: ${MODAL_ENTRYPOINT}"
          for attempt in 1 2 3; do
            if env -u MODAL_TOKEN_ID -u MODAL_TOKEN_SECRET               python -m modal deploy "${MODAL_ENTRYPOINT}"; then
              echo "Deploy succeeded."
              exit 0
            fi
            echo "Deploy failed (attempt ${attempt}). Retrying in 10s..."
            sleep 10
          done
          echo "::error::Modal deploy failed after 3 attempts."
          exit 1

      - name: Wait for app health (best-effort)
        if: success()
        shell: bash
        env:
          SSP_ACCOUNT: ${{ secrets.SSP_ACCOUNT }}
          SSP_APP_PREFIX: ${{ secrets.SSP_APP_PREFIX }}
        run: |
          set -euo pipefail
          ACC="${SSP_ACCOUNT:-${SSP_APP_PREFIX:-}}"
          if [ -z "${ACC}" ]; then
            echo "::warning::SSP_ACCOUNT/SSP_APP_PREFIX not provided; skipping health wait."
            exit 0
          fi
          URL="https://${ACC}--health.modal.run"
          echo "Waiting for health at ${URL}"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL") || code=000
            if [ "$code" -eq 200 ]; then
              echo "Health OK"
              exit 0
            fi
            sleep 2
          done
          echo "::warning::Health did not return 200 within timeout; continuing anyway."

      - name: Configure keep-warm mode
        if: success()
        shell: bash
        env:
          SSP_ACCOUNT: ${{ secrets.SSP_ACCOUNT }}
          SSP_APP_PREFIX: ${{ secrets.SSP_APP_PREFIX }}
          SSP_API_KEY: ${{ secrets.STAGESELLPRO_KEY }}
          KEEPWARM_MODE: ""               # off | dev | business
        run: |
          set -euo pipefail
          ACC="${SSP_ACCOUNT:-${SSP_APP_PREFIX:-}}"
          if [ -z "${ACC}" ]; then
            echo "::warning::SSP_ACCOUNT/SSP_APP_PREFIX not provided; skipping keep-warm config."
            exit 0
          fi
          if [[ "${ACC}" == *"--"* ]] || [[ "${ACC}" == *"_"* ]]; then
            echo "::error::Use only the account slug (e.g. 'miamicreme'); no '--' or '_'"
            exit 1
          fi
          MODE="${KEEPWARM_MODE:-}"
          if [ -z "$MODE" ]; then
            case "${GITHUB_REF_NAME}" in
              main|master) MODE="business" ;;
              *) MODE="off" ;;
            esac
          fi
          case "$MODE" in off|dev|business) ;; *) MODE="off" ;; esac

          URL_DASH="https://${ACC}--keepwarm-set.modal.run"
          URL_ALIAS="https://${ACC}--keepwarmset.modal.run"
          BODY_JSON=$(printf '{"mode":"%s"}' "$MODE")
          H_API=()
          [ -n "${SSP_API_KEY:-}" ] && H_API=(-H "x-api-key: ${SSP_API_KEY}")

          set_keepwarm() {
            local base="$1" ; local mode="$2"
            echo "Trying JSON POST at ${base}"
            local code
            code=$(curl -s -o /tmp/keepwarm_set.json -w "%{http_code}" -X POST "${base}"                     -H "Content-Type: application/json" "${H_API[@]}"                     -d "${BODY_JSON}") || code=000
            if [ "$code" -lt 400 ]; then return 0; fi
            echo "JSON returned $code. Trying form POST at ${base}"
            code=$(curl -s -o /tmp/keepwarm_set.json -w "%{http_code}" -X POST "${base}"                     -H "Content-Type: application/x-www-form-urlencoded" "${H_API[@]}"                     --data-urlencode "mode=${mode}") || code=000
            if [ "$code" -lt 400 ]; then return 0; fi
            echo "Form returned $code. Trying query POST at ${base}?mode=${mode}"
            code=$(curl -s -o /tmp/keepwarm_set.json -w "%{http_code}" -X POST "${base}?mode=${mode}"                     "${H_API[@]}") || code=000
            [ "$code" -lt 400 ]
          }

          echo "Setting keep-warm mode='${MODE}' at ${URL_DASH}"
          if ! set_keepwarm "${URL_DASH}" "${MODE}"; then
            echo "Dashed endpoint failed. Trying alias ${URL_ALIAS} ..."
            if ! set_keepwarm "${URL_ALIAS}" "${MODE}"; then
              echo "::error::keep-warm set failed"
              cat /tmp/keepwarm_set.json || true
              exit 1
            fi
          fi
          echo "Keep-warm set response:"
          cat /tmp/keepwarm_set.json || true

      - name: Verify keep-warm mode
        if: success()
        shell: bash
        env:
          SSP_ACCOUNT: ${{ secrets.SSP_ACCOUNT }}
          SSP_APP_PREFIX: ${{ secrets.SSP_APP_PREFIX }}
        run: |
          set -euo pipefail
          ACC="${SSP_ACCOUNT:-${SSP_APP_PREFIX:-}}"
          if [ -z "${ACC}" ]; then
            echo "::warning::SSP_ACCOUNT/SSP_APP_PREFIX not provided; skipping verification."
            exit 0
          fi
          URL_STATUS="https://${ACC}--keepwarm-status.modal.run"
          echo "Verifying keep-warm at ${URL_STATUS}"
          curl -fSs "$URL_STATUS" -o /tmp/keepwarm_status.json
          echo "Status:"
          cat /tmp/keepwarm_status.json
